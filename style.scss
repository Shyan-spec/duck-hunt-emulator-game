body {
  margin: 0 auto;
  background-color: rgb(93, 180, 242);
}

h1 {
  display: flex;
  justify-content: center;
  align-items: center;
}




.meta-data {
  margin-left: 5%;
}



/* Functions for Rounding Numbers */

/* Round a number to specified digits */
/* @param  {Number} $number A number to round */
/* @param  {Number} [$digits:0] Digits to output */
/* @param  {String} [$mode:round] (round|ceil|floor) How to round a number */
/* @return {Number} A rounded number */
/* Example:
     decimal-round(0.333)    => 0
     decimal-round(0.333, 1) => 0.3
     decimal-round(0.333, 2) => 0.33
     decimal-round(0.666)    => 1
     decimal-round(0.666, 1) => 0.7
     decimal-round(0.666, 2) => 0.67
*/
@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  }
  @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @for $i from 1 through $digits {
    $n: $n * 10;
  }
  @if $mode == round {
    @return calc(round($number * $n) / $n);
  }
  @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  }
  @else if $mode == floor {
    @return floor($number * $n) / $n;
  }
  @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

/* Ceil a number to specified digits */
/* @param  {Number} $number A number to round */
/* @param  {Number} [$digits:0] Digits to output */
/* @return {Number} A ceiled number */
/* Example:
     decimal-ceil(0.333)    => 1
     decimal-ceil(0.333, 1) => 0.4
     decimal-ceil(0.333, 2) => 0.34
     decimal-ceil(0.666)    => 1
     decimal-ceil(0.666, 1) => 0.7
     decimal-ceil(0.666, 2) => 0.67
*/
@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

/* Floor a number to specified digits */
/* @param  {Number} $number A number to round */
/* @param  {Number} [$digits:0] Digits to output */
/* @return {Number} A floored number */
/* Example:
     decimal-floor(0.333)    => 0
     decimal-floor(0.333, 1) => 0.3
     decimal-floor(0.333, 2) => 0.33
     decimal-floor(0.666)    => 0
     decimal-floor(0.666, 1) => 0.6
     decimal-floor(0.666, 2) => 0.66
*/
@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

/* v Function */
@function v($x, $y) {
  $start-x: -100px;
  $end-x: 1000px;
  $steps-x: 50;
  $steps-x-value: calc(($start-x - $end-x) / $steps-x) * -1;

  $start-y: -50px;
  $end-y: 1300px;
  $steps-y: 50;
  $steps-y-value: calc(($start-y - $end-y) / $steps-y) * -1;
  
  $x-list: ();
  $y-list: ();

  $nextval: $start-x;
  @while $nextval < $end-x {
    $x-list: append($x-list, $nextval);
    $nextval: $nextval + $steps-x-value;
  }

  $nextval: $start-y;
  @while $nextval < $end-y {
    $y-list: append($y-list, $nextval);
    $nextval: $nextval + $steps-y-value;
  }

  @return nth($x-list, $x), nth($y-list, $y);
}

/* randomVList Function */
@function randomVList() {
  $x-maxsteps: 50;
  $y-maxsteps: 50;
  $x: random($x-maxsteps - 10);
  $y: random($y-maxsteps - 10);
  $list: ();
  $list: append($list, $x $y);
  $random-x-steps: random($x-maxsteps - 5) + 5;
  @while $x < $random-x-steps {
    $x: $x + 1;
    @if $y == $y-maxsteps {
      $y: $y + (random(2) - 2);
    } @else if $y == 1 {
      $y: $y + (random(2) - 1);
    } @else {
      $y: $y + (random(3) - 2);
    }
    $list: append($list, $x $y);
  }
  @return $list;
}

/* animation Mixin */
@mixin animation($name, $tupleList) {
  @keyframes #{$name} {
    $steps: length($tupleList);
    @if $steps > 1 {
      @for $i from 1 to $steps {
        $percentage: percentage(calc($i / ($steps - 1)));

        #{$percentage} {
          $tuple: nth($tupleList, $i + 1);
          transform: translate(v(nth($tuple, 1), nth($tuple, 2)));
        }
      }
      0% { opacity: 0; }
      15% { opacity: 1; }
      85% { opacity: 1; }
      100% { opacity: 0; }
    }
  }
}





/* Generate Random Animations */
@for $i from 1 to 20 {
  $randomlist: randomVList();
  @while length($randomlist) < 3 {
    $randomlist: randomVList();
  }
  @include animation("animation" + $i, $randomlist);
}


/* Generate Particles */
.particle {
	position: absolute;
	opacity: 0;
	overflow: visible;
	background-size: contain; //auto|length|cover|contain|initial|inherit
}

/* Generate Particles */
@for $i from 1 to 20 {
  .elem#{$i} { /* Add "particle." before the class name */
    $position: v(random(10), random(10));
    left: nth($position, 1);
    top: nth($position, 2);
    $duration: 15 + random(5);
    animation: animation#{$i} linear #{$duration}s infinite;
    $size: 12px + random(20);
    height: $size;
    width: $size;
    background-color: black; /* Set background color to white */
    z-index: 1; /* Ensure particles are above the background */
    
  }
}

@for $i from 1 through 20 {
	.anim-delay#{$i} {
		//$animationdelay: random(20);
		//for demo:
		$animationdelay: random(5);
		animation-delay: #{$animationdelay}s;
	}
}

/* Wrapper Styles */
.Play-space {
  height: 100%;
  overflow: hidden;
  width: 100%;
  margin: 0 auto;
  background: #33333300;
  position: relative;
}

.grid {  display: grid;
  grid-template-columns: 1fr;
  grid-template-rows: 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr;
  grid-auto-columns: 1fr;
  grid-auto-rows: 1fr;
  gap: 0px 0px;
  grid-auto-flow: row;
  grid-template-areas:
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "Play-space"
    "empty-space"
    "empty-space"
    "empty-space"
    "empty-space"
    "empty-space";

    background: url('DALLÂ·E\ 2023-12-01\ 13.40.41\ -\ A\ simple\ 8-bit\ style\ background\ of\ a\ grassy\ field\ with\ a\ clear\ blue\ sky\ and\ snowy\ mountains.\ The\ mountains\ are\ positioned\ low\ in\ the\ screen\,\ creating\ .png') no-repeat center center ;
    background-size: cover; /* Adjust as needed */
      height: 800px;
      width: 800px;
      
      box-shadow: 0 0 30px rgba(0, 0, 0, 0.3);
    height: 800px;
    width: 800px;
}

.empty-space {  display: grid;
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;
  gap: 0px 0px;
  grid-auto-flow: row;
  grid-template-areas:
    ". . ."
    ". . ."
    ". . .";
  grid-area: empty-space;
}

.Play-space {  display: grid;
  grid-auto-columns: 1fr;
  gap: 0px 0px;
  grid-auto-flow: row;
  grid-area: Play-space;
}

.container {
  display: flex;
  justify-content: center;
  align-items: cneter;
}

